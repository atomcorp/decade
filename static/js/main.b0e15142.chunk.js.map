{"version":3,"sources":["components/Home/Home.module.css","components/Playlists/Playlists.module.css","consts.ts","components/Playlists/Playlists.tsx","components/Playlist/Playlist.tsx","components/Routes.tsx","components/Home/Home.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","PLAYLISTS","name","id","Playlists","className","css","list","map","playlist","key","to","Playlist","playlistId","useParams","payload","useSuspenseQuery","method","endpoint","process","tracks","track","artists","artist","join","Routes","path","Home","container","title","fallback","Boolean","window","location","hostname","match","cache","createCache","action","response","status","client","createClient","cacheProvider","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,MAAQ,sB,mBCA9DD,EAAOC,QAAU,CAAC,KAAO,0B,2JCDZC,EAAY,CACvB,CAACC,KAAM,OAAQC,GAAI,0BACnB,CAACD,KAAM,OAAQC,GAAI,0BACnB,CAACD,KAAM,OAAQC,GAAI,0BACnB,CAACD,KAAM,OAAQC,GAAI,0BACnB,CAACD,KAAM,OAAQC,GAAI,0BACnB,CAACD,KAAM,OAAQC,GAAI,0BACnB,CAACD,KAAM,OAAQC,GAAI,0BACnB,CAACD,KAAM,OAAQC,GAAI,0BACnB,CAACD,KAAM,OAAQC,GAAI,0BACnB,CAACD,KAAM,OAAQC,GAAI,0BACnB,CAACD,KAAM,WAAYC,GAAI,2B,iBCOVC,EAZa,kBAC1B,iCACE,wBAAIC,UAAWC,IAAIC,MAChBN,EAAUO,KAAI,SAACC,GAAD,OACb,wBAAIC,IAAKD,EAASN,IAChB,kBAAC,IAAD,CAAMQ,GAAE,oBAAeF,EAASN,KAAOM,EAASP,aCuB3CU,EA5BY,WAAO,IACzBC,EAAcC,cAAdD,WACAE,EAAWC,2BAA+B,CAC/CC,OAAQ,MACRC,SAAS,GAAD,OAAKC,UAAL,sBAAoDN,EAApD,WAFHE,QAIP,OAAKA,EAIH,iCACE,6BACA,kBAAC,IAAD,CAAMJ,GAAG,KAAT,QACA,6BACA,6BACA,2BAAII,EAAQb,MACZ,4BACGa,EAAQK,OAAOZ,KAAI,SAACa,GAAD,OAClB,wBAAIX,IAAKW,EAAMlB,IACZkB,EAAMC,QAAQd,KAAI,SAACe,GAAD,OAAYA,EAAOrB,QAAMsB,KAAK,MADnD,KAC4D,IACzDH,EAAMnB,WAbR,MCMIuB,EAbU,kBACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,yBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,EAAD,U,iBCGOC,EAXQ,kBACrB,oCACE,6BAAStB,UAAWC,IAAIsB,WACtB,wBAAIvB,UAAWC,IAAIuB,OAAnB,SACA,kBAAC,WAAD,CAAUC,SAAU,yCAClB,kBAAC,EAAD,U,MCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHN,IAAMC,EAAQC,uBACZ,SAACC,GACC,MAAyB,QAAlBA,EAAOrB,UAEhB,SAACsB,GAEC,OAA2B,MAApBA,EAASC,UAIdC,EAASC,uBAAa,CAACC,cAAeP,IAE5CQ,IAASC,OACP,kBAAC,wBAAD,CAAuBJ,OAAQA,GAC7B,kBAAC,EAAD,OAEFK,SAASC,eAAe,SDoGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b0e15142.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1ukFy\",\"title\":\"Home_title__36VT4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Playlists_list__2aPSK\"};","export const PLAYLISTS = [\n  {name: '2010', id: '3suz5U1sFKZAnB0jIQyq5w'},\n  {name: '2011', id: '6S0N2gqj84dFlf7zjDwmim'},\n  {name: '2012', id: '3n5yJnfKwkZSaaBYsRoB3O'},\n  {name: '2013', id: '0dWK4F4cPcaHv7Jxgmco0l'},\n  {name: '2014', id: '5zYnYGmdjvt1Mi0Y6URjxV'},\n  {name: '2015', id: '426nb2ik0jRVdJHdmA9RVH'},\n  {name: '2016', id: '23tQCP4LTxzXYkq1IX5uRZ'},\n  {name: '2017', id: '6ar2Tjv1wy3WwZx8qucFiq'},\n  {name: '2018', id: '42ROzUApBgyUW8nuHGP6w7'},\n  {name: '2019', id: '1pjTl4HGhrtTB2w1WVvcqS'},\n  {name: '10-2010s', id: '2AQzOSsx2Rv8ofjg613Hrl'},\n];\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {PLAYLISTS} from 'consts';\nimport css from './Playlists.module.css';\n\nconst Playlists: React.FC = () => (\n  <section>\n    <ul className={css.list}>\n      {PLAYLISTS.map((playlist) => (\n        <li key={playlist.id}>\n          <Link to={`/playlist/${playlist.id}`}>{playlist.name}</Link>\n        </li>\n      ))}\n    </ul>\n  </section>\n);\n\nexport default Playlists;\n","import React from 'react';\nimport {useParams, Link} from 'react-router-dom';\nimport {useSuspenseQuery} from 'react-fetching-library';\n\nimport {playlistType} from 'types';\n\nconst Playlist: React.FC = () => {\n  const {playlistId} = useParams();\n  const {payload} = useSuspenseQuery<playlistType>({\n    method: 'GET',\n    endpoint: `${process.env.REACT_APP_PUBLIC_PATH}/playlists/${playlistId}.json`,\n  });\n  if (!payload) {\n    return null;\n  }\n  return (\n    <section>\n      <br />\n      <Link to=\"/\">Back</Link>\n      <br />\n      <br />\n      <b>{payload.name}</b>\n      <ol>\n        {payload.tracks.map((track) => (\n          <li key={track.id}>\n            {track.artists.map((artist) => artist.name).join(', ')} -{' '}\n            {track.name}\n          </li>\n        ))}\n      </ol>\n    </section>\n  );\n};\n\nexport default Playlist;\n","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\n\nimport Playlists from 'components/Playlists/Playlists';\nimport Playlist from 'components/Playlist/Playlist';\n\nconst Routes: React.FC = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/playlist/:playlistId\">\n        <Playlist />\n      </Route>\n      <Route>\n        <Playlists />\n      </Route>\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Routes;\n","import React, {Suspense} from 'react';\n\nimport Routes from 'components/Routes';\nimport css from './Home.module.css';\n\nconst Home: React.FC = () => (\n  <>\n    <section className={css.container}>\n      <h1 className={css.title}>2010s</h1>\n      <Suspense fallback={<div>Loading</div>}>\n        <Routes />\n      </Suspense>\n    </section>\n  </>\n);\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  createClient,\n  ClientContextProvider,\n  QueryResponse,\n  createCache,\n} from 'react-fetching-library';\n\nimport Home from 'components/Home/Home';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst cache = createCache(\n  (action) => {\n    return action.method === 'GET';\n  },\n  (response: QueryResponse & {timestamp: number}) => {\n    // return cache if the previous request was a success\n    return response.status === 200;\n  }\n);\n\nconst client = createClient({cacheProvider: cache});\n\nReactDOM.render(\n  <ClientContextProvider client={client}>\n    <Home />\n  </ClientContextProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}